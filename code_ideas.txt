boardOriginal[8][8] = current board;

boardTemp[8][8] = will be modified by the recursive move function then reset = to original

int values[8][8] = {{0,4,0,4,0,4,0,4},{4,0,3,0,3,0,3,0},{0,3,0,2,0,2,4},{4.0.2.0.1.0.3.0},{0,3,0,1,0,2,0,4},{4,0,2,0,2,0,3},{0,3,0,3,0,3,0,4}, {4,0,4,0,4,0,4,0}},

struct move {
  int x, y, moveCode;
  *next pos move;
};

move *root;
move *curnode;

move *second Moves root;
move *cur move 2;

int get value at (y, x) {
  return value[y][x];
}

void recurseDetermine moves () {
  for( i < 8) {
    for (u < 8) {
      if(boardOriginal[i][u] == 2) {
          can move left ? -> cur node = new node(i, u, 1) -> cur node = cur node.next move
          can move right ? -> cur node = new node(i, u, 2) -> cur node = cur node.next move
          can jump left ? -> cur node = new node(i, u, 3) -> cur node = cur node.next move
          can jump right ? -> cur node = new node(i, u, 3) -> cur node = cur node.next move
      } 
  }
}
return 
}

struct moveRecursive(lastMove Score, struct cur Best Move) {
  
  
  }
  
void free moves() {
  cur noe = root;
  temp * = curnode
  while(curnode.nextmove != null) {
    temp = curnode.next move
    free curnode
    curnode = temp;
  }
}

void free next mvoes(){
  cur noe2 = root2;
  temp * = curnode2
  while(curnode2.nextmove != null) {
    temp = curnode2.next move
    free curnode2
    curnode2 = temp;
  }
}
